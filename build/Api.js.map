{"version":3,"sources":["Api.js"],"names":["Api","express","middleware","routes","use","json","urlencoded","extended","req","res","message"],"mappings":";;;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;AAEA;AACA;IACqBA,G;;AAInB;AACA;AACA;AACA,iBAAc;AAAA;;AACZ,SAAKC,OAAL,GAAe,wBAAf;AACA,SAAKC,UAAL;AACA,SAAKC,MAAL;AACD;;AAED;AACA;;AAbA;;;;;iCAcmB;AACjB,WAAKF,OAAL,CAAaG,GAAb,CAAiB,sBAAO,KAAP,CAAjB;AACA,WAAKH,OAAL,CAAaG,GAAb,CAAiB,qBAAWC,IAAX,EAAjB;AACA,WAAKJ,OAAL,CAAaG,GAAb,CAAiB,qBAAWE,UAAX,CAAsB,EAACC,UAAU,KAAX,EAAtB,CAAjB;AACD;;AAED;AACA;AACA;AACA;AACA;;;;6BACe;AACb,WAAKN,OAAL,CAAaG,GAAb,CAAiB,UAACI,GAAD,EAAgBC,GAAhB,EAAmC;AAClDA,YAAIJ,IAAJ,CAAS,EAAEK,SAAS,aAAX,EAAT;AACD,OAFD;AAGD;;;;;;kBA9BkBV,G","file":"Api.js","sourcesContent":["// @flow\n\nimport express from 'express';\nimport morgan from 'morgan';\nimport bodyParser from 'body-parser';\n\n// First, we create a field reference for the Api.express property,\n// and tell Flow that it will be an object of type express$Application from Express.\nexport default class Api {\n  // annotate with the express $Application type\n  express: express$Application;\n\n  // create the express instance, attach app-level middleware, attach routers\n  // The constructor initializes an instance of Express, and attaches it to the instance of Api.\n  // Then it calls the other two methods, Api.middleware and Api.routes.\n  constructor() {\n    this.express = express();\n    this.middleware();\n    this.routes();\n  }\n\n  // register middlewares\n  // Api.middleware - Initializes and attaches our middleware modules to the app.\n  middleware(): void {\n    this.express.use(morgan('dev'));\n    this.express.use(bodyParser.json());\n    this.express.use(bodyParser.urlencoded({extended: false}));\n  }\n\n  // connect resource routers\n  // Api.routes - Right now, it attaches a single route handler that returns some JSON.\n  // However, notice the Flow annotations on the parameters of the anonymous function. These correspond\n  // to the base arguments for an Express route handler: $Request and $Response. These refer to Express'\n  // extended versions of Nodeâ€™s IncomingMessage and ServerResponse objects, respectively.\n  routes(): void {\n    this.express.use((req: $Request, res: $Response) => {\n      res.json({ message: 'Hello Flow!' });\n    });\n  }\n}\n"]}