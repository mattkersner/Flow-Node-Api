{"version":3,"sources":["routers/ProduceRouter.js"],"names":["ProduceRouter","path","router","init","req","res","status","json","id","parseInt","params","record","find","item","message","received","body","newProduce","push","then","writePath","logger","relative","join","__dirname","catch","err","stack","searchId","payload","toUpdate","Object","keys","forEach","key","Number","toDel","findIndex","deleted","splice","get","getAll","getById","post","postOne","put","updateOneById","delete","removeById"],"mappings":"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","file":"ProduceRouter.js","sourcesContent":["// @ flow\n\nimport inventory from '../../data/produce';\nimport { Router }  from 'express';\nimport saveInventory, {genId} from '../util/save';\nimport { parseProduce, parseUpdate, parseId } from '../util/parsers';\n\nexport default class ProduceRouter {\n  // these fields must be type annotated, or Flow will complain!\n  router: Router;\n  path: string;\n\n  // take the mount path as the constructor argument\n  constructor(path = '/api/v1/produce') {\n    // instantiate the express.Router\n    this.router = Router();\n    this.path = path;\n    // glue it all together\n    this.init();\n  }\n\n  /**\n   * Return all items in the inventory\n   */\n  getAll(req: $Request, res: $Response): void {\n    res.status(200).json(inventory);\n  }\n\n  /**\n   * Return an item from the inventory by ID.\n   */\n  getById(req: $Request, res: $Response): void {\n    const id = parseInt(req.params.id, 10);\n    const record = inventory.find(item => item.id === id);\n    if(record) {\n      res.status(200).json({\n        message: 'Success!',\n        item: record\n      });\n    } else {\n      res.status(400).json({\n        status: res.status,\n        message: `No item found with id: ${id}`\n      });\n    }\n  }\n\n  /**\n   * Add a new item to the inventory\n   */\n   postOne(req: $Request, res: $Response): void {\n    const received: Produce | boolean = parseProduce(req.body);\n    const newProduce = (received) ? req.body : null;\n    if (received) {\n      newProduce.id = genId(received, inventory);\n      inventory.push(newProduce);\n      res.status(200).json({\n        status: 200,\n        message: 'Success!',\n        item: newProduce\n      });\n      //write updated inventory to the file\n      saveInventory(inventory)\n      .then((writePath) => {\n        logger(`Inventory updated. Written to:\\n\\t${path.relative(path.join(__dirname, '..', '..'), writePath)}`);\n      })\n      .catch((err) => {\n        logger('Error writing to inventory file.');\n        logger(err.stack);\n      });\n    } else {\n      res.status(400).json({\n        status: 400,\n        message: 'Bad Request. Make sure that you submit an item with a name, quantity, and price.'\n      });\n      logger('Malformed POST to /produce.');\n    }\n   }\n\n   /**\n   * Update a produce item by id\n   */\n   updateOneById(req: $Request, res: $Response): void {\n    const searchId: number | boolean = parseId(req.params);\n    const payload: any = parseUpdate(req.body);\n    let toUpdate: Produce = inventory.find(item => item.id === searchId);\n    if (toUpdate && payload) {\n      Object.keys(payload).forEach((key) => {\n        if (key === 'quantity' || key === 'price') toUpdate[key] = Number(payload[key]);\n        else toUpdate[key] = payload[key];\n      });\n      res.json({\n        status: res.status,\n        message: 'Success!',\n        item: toUpdate\n      });\n      saveInventory(inventory)\n      .then((writePath) => {\n        logger(`Item updated. Inventory written to:\\n\\t${path.relative(path.join(__dirname, '..', '..'), writePath)}`);\n      })\n      .catch((err) => {\n        logger('Error writing to inventory file.');\n        logger(err.stack);\n      });\n    } else {\n      res.status(400).json({\n        status: res.status,\n        message: 'Update failed. Make sure the item ID and submitted fields are correct.'\n      });\n    }\n   }\n\n   /**\n   * Remove an item from the inventory by ID\n   */\n   removeById(req: $Request, res: $Response): void {\n    const searchId: number | boolean = parseId(req.params);\n    let toDel: number = inventory.findIndex(item => item.id === searchId);\n    if (toDel !== -1) {\n      let deleted = inventory.splice(toDel, 1)[0];\n      res.json({\n        status: 200,\n        message: 'Success!',\n        deleted\n      });\n      //update json file\n      saveInventory(inventory)\n      .then((writePath) => {\n        logger(`Item deleted. Inventory written to:\\n\\t${writePath}`);\n      })\n      .catch((err) => {\n        logger('Error writing to inventory file.');\n        logger(err.stack);\n      });\n    } else {\n      res.status(400).json({\n        status: 400,\n        message: 'No item found with given ID.'\n      });\n    }\n   }\n\n\n  /**\n   * Attach route handlers to their endpoints.\n   */\n  init(): void {\n    this.router.get('/', this.getAll);\n    this.router.get('/:id', this.getById);\n    this.router.post('/', this.postOne);\n    this.router.put('/:id', this.updateOneById);\n    this.router.delete('/:id', this.removeById);\n  }\n}\n"]}