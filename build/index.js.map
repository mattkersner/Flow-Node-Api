{"version":3,"sources":["index.js"],"names":["http","logger","app","DEFAULT_PORT","port","normalizePort","process","env","PORT","server","createServer","express","listen","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","toString","code","console","exit","addr","address"],"mappings":"AAEA;;AAEA;;IAAYA,I;;AACZ;;;;AACA;;;;;;;;AAiBA;AACA;;;AAhBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAUA,IAAMC,SAAS,qBAAM,kBAAN,CAAf;AACA,IAAMC,MAAW,mBAAjB;AACA,IAAMC,eAAuB,IAA7B;AACA;AACA;AACA,IAAMC,OAAwBC,cAAcC,QAAQC,GAAR,CAAYC,IAA1B,CAA9B;AACA,IAAMC,SAAsBT,KAAKU,YAAL,CAAkBR,IAAIS,OAAtB,CAA5B;;AAEAF,OAAOG,MAAP,CAAcR,IAAd;AACA;AACAK,OAAOI,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACA;AACAL,OAAOI,EAAP,CAAU,WAAV,EAAuBE,WAAvB;;AAEA,SAASV,aAAT,CAAuBW,GAAvB,EAAkD;AAChD,MAAIZ,OAAgB,OAAOY,GAAP,KAAe,QAAhB,GAA4BC,SAASD,GAAT,EAAc,EAAd,CAA5B,GAAgDA,GAAnE;;AAEA,MAAIZ,QAAQc,MAAMd,IAAN,CAAZ,EAAyB,OAAOA,IAAP,CAAzB,KACK,IAAIA,QAAQ,CAAZ,EAAe,OAAOA,IAAP,CAAf,KACA,OAAOD,YAAP;AACN;;AAED,SAASW,OAAT,CAAiBK,KAAjB,EAA0C;AACxC,MAAIA,MAAMC,OAAN,KAAkB,QAAtB,EAAgC,MAAMD,KAAN;AAChC,MAAIE,OAAgB,OAAOjB,IAAP,KAAgB,QAAjB,aAAqCA,IAArC,aAAsDA,KAAKkB,QAAL,EAAzE;;AAEA,UAAQH,MAAMI,IAAd;AACE,SAAK,QAAL;AACEC,cAAQL,KAAR,CAAiBE,IAAjB;AACAf,cAAQmB,IAAR,CAAa,CAAb;AACA;AACF,SAAK,YAAL;AACED,cAAQL,KAAR,CAAiBE,IAAjB;AACAf,cAAQmB,IAAR,CAAa,CAAb;AACA;AACF;AACE,YAAMN,KAAN;AAVJ;AAYD;;AAED,SAASJ,WAAT,GAA6B;AAC3B,MAAIW,OAAejB,OAAOkB,OAAP,EAAnB;AACA,MAAIN,OAAgB,OAAOK,IAAP,KAAgB,QAAjB,aAAqCA,IAArC,aAAsDA,KAAKtB,IAA9E;AACAH,2BAAuBoB,IAAvB;AACD","file":"index.js","sourcesContent":["// @flow\n\n'use strict'\n\nimport * as http from 'http';\nimport debug from 'debug';\nimport Api from './Api';\n\n// At the top we’ve got our Flow comment, imports, and our first bit of\n// strictly Flow-enabled code - the ErrnoError interface declaration. This error type\n// is used by Express. When using the flow check command from the official command line tool,\n// Flow will not flag this as an error. For whatever reason, gulp-flowtype does.\n// If you get a strange type check error, it may be worth it to install the Flow CLI and\n// double check using flow check.\n\n// ErrnoError interface for use in onError\ndeclare interface ErrnoError extends Error {\n  errno?: number;\n  code?: string;\n  path?: string;\n  syscall?: string;\n}\n\n// After the ErrnoError definition, we set up some data and\n// instantiate the server by attaching our future Express app with http.createServer.\nconst logger = debug('flow-api:startup');\nconst app: Api = new Api();\nconst DEFAULT_PORT: number = 3000;\n// normalizePort looks for the $PORT environment variable and sets the app’s port to its value.\n// If it doesn’t exist, it sets the port to the default value - 3000.\nconst port: string | number = normalizePort(process.env.PORT);\nconst server: http.Server = http.createServer(app.express);\n\nserver.listen(port);\n// onError is just our basic error handler for the HTTP server.\nserver.on('error', onError);\n// onListening simply lets us know that our application has actually started and is listening for requests.\nserver.on('listening', onListening);\n\nfunction normalizePort(val: any): number | string {\n  let port: number = (typeof val === 'string') ? parseInt(val, 10) : val;\n\n  if (port && isNaN(port)) return port;\n  else if (port >= 0) return port;\n  else return DEFAULT_PORT;\n}\n\nfunction onError(error: ErrnoError): void {\n  if (error.syscall !== 'listen') throw error;\n  let bind: string = (typeof port === 'string') ? `Pipe ${port}` : `Port ${port.toString()}`;\n\n  switch (error.code) {\n    case 'EACCES':\n      console.error(`${bind} requires elevated privileges`);\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(`${bind} is already in use`);\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\nfunction onListening(): void {\n  let addr: string = server.address();\n  let bind: string = (typeof addr === 'string') ? `pipe ${addr}` : `port ${addr.port}`;\n  logger(`Listening on ${bind}`);\n}\n\n"]}