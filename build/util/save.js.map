{"version":3,"sources":["util/save.js"],"names":["saveInventory","genId","inventory","outpath","join","__dirname","Promise","resolve","reject","process","env","NODE_ENV","writeFile","JSON","stringify","err","prod","inv","maxId","id","slice","forEach","item"],"mappings":";;;;;kBAQwBA,a;QAaRC,K,GAAAA,K;;AAnBhB;;;;AACA;;;;;;AAEA;AAGe,SAASD,aAAT,CAAuBE,SAAvB,EAAmE;AAChF,MAAIC,UAAU,eAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,MAAjC,EAAyC,cAAzC,CAAd;;AAEA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC;AACA,QAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnC,mBAAGC,SAAH,CAAaT,OAAb,EAAsBU,KAAKC,SAAL,CAAeZ,SAAf,EAA0B,IAA1B,EAAgC,IAAhC,CAAtB,EAA6D,UAACa,GAAD,EAAS;AACnEA,WAAD,GAAQP,OAAOO,GAAP,CAAR,GAAsBR,QAAQJ,OAAR,CAAtB;AACD,OAFD;AAGD;AACF,GAPM,CAAP;AAQD;;AAEM,SAASF,KAAT,CAAee,IAAf,EAA8BC,GAA9B,EAA2D;AAChE,MAAIC,QAAmCD,IAAI,CAAJ,EAAOE,EAA9C;AACAF,MAAIG,KAAJ,CAAU,CAAV,EAAaC,OAAb,CAAqB,UAACC,IAAD,EAAU;AAC7B,QAAIA,KAAKH,EAAL,IAAWG,KAAKH,EAAL,GAAUD,KAAzB,EAAgCA,QAAQI,KAAKH,EAAb;AACjC,GAFD;AAGA,SAAOD,QAAQ,CAAf;AACD","file":"save.js","sourcesContent":["// @flow\n\nimport path from 'path';\nimport fs from 'fs';\n\n// use a Flow type import to get our Produce type\nimport type {Produce} from './types';\n\nexport default function saveInventory(inventory: Array<Produce>): Promise<string> {\n  let outpath = path.join(__dirname, '..', '..', 'data', 'produce.json');\n\n  return new Promise((resolve, reject) => {\n    // lets not write to the file if we're running tests\n    if (process.env.NODE_ENV !== 'test') {\n      fs.writeFile(outpath, JSON.stringify(inventory, null, '\\t'), (err) => {\n        (err) ? reject(err) : resolve(outpath);\n      });\n    }\n  });\n}\n\nexport function genId(prod: Produce, inv: Array<Produce>): number {\n  let maxId: number | typeof undefined = inv[0].id;\n  inv.slice(1).forEach((item) => {\n    if (item.id && item.id > maxId) maxId = item.id;\n  });\n  return maxId + 1;\n}\n"]}